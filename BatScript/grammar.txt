program       -> statement* EOF

type          -> ( "int" | "float" | "bool" | "string" | IDENTIFIER ) ( "[" ( expression )? "]" )*

// Simple statements can be used in single line compound statements
statement     -> simple_stmt | compound_stmt
simple_stmt   -> expr_stmt
               | assign_stmt
               | print_stmt
               | return_stmt
               | import_stmt
               | native_stmt
               | var_decl
compound_stmt -> if_stmt
               | while_stmt
               | for_stmt
               | function_decl

block         -> indent statement+ dedent
suite         -> (eol block | simple_stmt)

var_decl      -> IDENTIFIER ( ":=" expression | ":" type ("=" expression)? ) eol
function_decl -> "def" IDENTIFIER "(" parameters? ")" ( "->" type )? ":" suite

expr_stmt     -> expression eol
assign_stmt   -> expression ( assign ) expression ) eol
assign        -> ( "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "^=" | "|=" )

print_stmt    -> "print" expression eol

if_stmt       -> "if" expression ":" suite ("else" suite)?
while_stmt    -> "while" expression ":" suite
for_stmt      -> "for" "(" expression? ";" expression? ";" expression? ")" ":" suite // Ignore me for now :)

return_stmt   -> "return" expression? eol

import_stmt   -> "import" IDENTIFIER eol
native_stmt   -> "native" IDENTIFIER "(" parameters? ")" "->" type eol

parameter     -> IDENTIFIER ":" type ( "=" expression )?
parameters    -> parameter ( "," parameter )* ( "," "..." )?

expression    -> or
or            -> and ( "or" and )*
and           -> bitor ( "and" bitor )*
bitor         -> bitxor ( "|" bitxor )*
bitxor        -> bitand ( "^" bitand )*
bitand        -> equal ( "&" equal )*
equal         -> comp ( ( "==" | "!=" ) comp )*
comp          -> shift ( ( "<" | "<=" | ">=" | ">" ) shift )*
shift         -> add ( ( "<<" | ">>" ) add )*
add           -> mult ( ( "+" | "-" ) mult )*
mult          -> unary ( ( "*" | "/" | "%" ) unary )*
unary         -> ( "+" | "-" | "!" | "~" | "*" | "&" | "print" ) unary
               | call
call          -> primary ( ( "(" arguments? ")" ) | ( "[" expression "]" ) )*
arguments     -> expression ( "," expression )*
primary       -> NUMBER | STRING | "false" | "true" | "null" // Literals
               | "(" expression ")" // Grouping
               | "[" array_values? "]" // Array literal
array_values  -> expression ( "," expression )* ","? // Optional trailing comma